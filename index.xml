<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bojanz.github.io</title>
    <link>https://bojanz.github.io/</link>
    <description>Recent content on bojanz.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://bojanz.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Increasing http.Server boilerplate</title>
      <link>https://bojanz.github.io/increasing-http-server-boilerplate-go/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bojanz.github.io/increasing-http-server-boilerplate-go/</guid>
      <description>One great feature of Go is the built-in http.Server. It allows each app to serve HTTP and HTTPS traffic without having to put a reverse proxy such as Nginx in front of it.
At a glance the API is simple:
http.ListenAndServe(&amp;#34;:8080&amp;#34;, h) where h is usually a third party router such as Chi. But as always, the devil is in the details. Handling these details will require some boilerplate, so let&amp;rsquo;s start writing it.</description>
    </item>
    
    <item>
      <title>Developing price and currency handling for Go</title>
      <link>https://bojanz.github.io/price-currency-handling-go/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bojanz.github.io/price-currency-handling-go/</guid>
      <description>Now that bojanz/currency is listed on Awesome Go, it&amp;rsquo;s a good time to reflect on the ideas that made it a reality. Back in March I started using Go for a few side projects, and I ran into the need to represent and handle currency amounts (prices). After some research I realized that the ecosystem was missing a complete solution.
What do we need? Let&amp;rsquo;s sketch out our requirements.
type Amount struct { number decimal currencyCode string } // Methods: NewAmount(), Add, Sub, Mul, Div, Round, Cmp.</description>
    </item>
    
    <item>
      <title>Optional function parameters in Go</title>
      <link>https://bojanz.github.io/optional-parameters-go/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bojanz.github.io/optional-parameters-go/</guid>
      <description>Go doesn&amp;rsquo;t support optional function parameters. This was an intentional decision by the language creators:
One feature missing from Go is that it does not support default function arguments. This was a deliberate simplification. Experience tells us that defaulted arguments make it too easy to patch over API design flaws by adding more arguments, resulting in too many arguments with interactions that are difficult to disentangle or even understand. The lack of default arguments requires more functions or methods to be defined, as one function cannot hold the entire interface, but that leads to a clearer API that is easier to understand.</description>
    </item>
    
    <item>
      <title>Stepping down as the Drupal Commerce project lead</title>
      <link>https://bojanz.github.io/stepping-down-as-drupal-commerce-project-lead/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bojanz.github.io/stepping-down-as-drupal-commerce-project-lead/</guid>
      <description>Time flies when you&amp;rsquo;re having fun! On March 1st 2011, 9 years ago, I joined Commerce Guys, a French-American company with big dreams. In late 2014 I started working on Commerce 2.x, a ground-up rewrite of Drupal Commerce targeting the upcoming Drupal 8 platform. In early 2016, after several rounds of VC funding, Commerce Guys became Platform.sh, while Ryan Szrama, Matt Glaman and myself started Centarro, a company solely devoted to the dream of Drupal-based eCommerce.</description>
    </item>
    
    <item>
      <title>Rebooting the blog</title>
      <link>https://bojanz.github.io/rebooting-the-blog/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bojanz.github.io/rebooting-the-blog/</guid>
      <description>Five years ago I relaunched my blog on WordPress. As a Drupal developer I wanted to experience a competing product from the perspective of a regular user. A year later I become the development lead for Drupal Commerce, and my blogging mostly moved to the Drupal Commerce blog, with 15 posts over the past few years. Meanwhile, the desire to try other systems persisted. Our documentation site is powered by Grav nowadays, which had a good skeleton for what we needed to build.</description>
    </item>
    
    <item>
      <title>Storing hierarchical data - Materialized Path</title>
      <link>https://bojanz.github.io/storing-hierarchical-data-materialized-path/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://bojanz.github.io/storing-hierarchical-data-materialized-path/</guid>
      <description>Web applications often need a way to represent and store hierarchies.
A menu with its submenus. A category with its subcategories. A comment and its replies. Storing the hierarchy, and later reconstructing it from the stored data is just a part of the puzzle. We also need a way to find the parents or children of an item. We need to be able to re-parent an item (move it to another part of the hierarchy).</description>
    </item>
    
  </channel>
</rss>
